
;(tool-bar-mode -1)
(menu-bar-mode -1)

(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq visible-bell nil)
(setq ring-bell-function 'ignore)
(setq xterm-mouse-mode 1)

(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(package-initialize)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-enabled-themes (quote (gruvbox-dark-medium)))
 '(custom-safe-themes
   (quote
    ("939ea070fb0141cd035608b2baabc4bd50d8ecc86af8528df9d41f4d83664c6a" "4cf9ed30ea575fb0ca3cff6ef34b1b87192965245776afa9e9e20c17d115f3fb" "84890723510d225c45aaff941a7e201606a48b973f0121cb9bcb0b9399be8cba" "aded61687237d1dff6325edb492bde536f40b048eab7246c61d5c6643c696b7f" default)))
 '(lsp-ui-doc-max-width 100)
 '(lsp-ui-doc-use-childframe nil)
 '(package-selected-packages
   (quote
    (flycheck-golangci-lint evil-smartparens aggressive-indent helm-posframe ag powerline-evil helm projectile go-guru neotree exec-path-from-shell evil-leader fzf lsp-haskell lsp-elixir gruvbox-theme go-mode yasnippet company-lsp flycheck company lsp-ui lsp-mode ## evil-surround evil))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(lsp-ui-doc-background ((t (:background "color-234"))))
 '(lsp-ui-doc-header ((t (:background "color-235" :foreground "black")))))

(require 'evil)
(require 'evil-leader)

(projectile-mode +1)

(global-evil-leader-mode)
(evil-leader/set-leader ",")
(evil-leader/set-key
 "e" 'fzf
 "b" 'switch-to-buffer
 "k" 'kill-buffer
 "c" 'delete-window
 "s" 'split-window-vertically
 "v" 'split-window-horizontally
 "p" 'projectile-commander
 )

(evil-mode 1)

(use-package evil-surround
	     :ensure t
	     :config
	     (global-evil-surround-mode 1))

(use-package lsp-mode
  :ensure t
  :commands (lsp lsp-deferred)
  :hook (go-mode . lsp-deferred))


;; Set up before-save hooks to format buffer and add/delete imports.
;; Make sure you don't have other gofmt/goimports hooks enabled.
(defun lsp-go-install-save-hooks ()
  (add-hook 'before-save-hook #'lsp-format-buffer t t)
  (add-hook 'before-save-hook #'lsp-organize-imports t t))
(add-hook 'go-mode-hook #'lsp-go-install-save-hooks)

;; Optional - provides fancier overlays.
(use-package lsp-ui
  :ensure t
  :commands lsp-ui-mode)
(add-hook 'lsp-mode-hook 'lsp-ui-mode)

;; Company mode is a standard completion package that works well with lsp-mode.
(use-package company
  :ensure t
  :config
  ;; Optionally enable completion-as-you-type behavior.
  (setq company-idle-delay 0)
  (setq company-minimum-prefix-length 1))

;; company-lsp integrates company mode completion with lsp-mode.
;; completion-at-point also works out of the box but doesn't support snippets.
(use-package company-lsp
  :ensure t
  :commands company-lsp)
(push 'company-lsp company-backends)

;; Optional - provides snippet support.
(use-package yasnippet
  :ensure t
  :commands yas-minor-mode
  :hook (go-mode . yas-minor-mode))

(require 'go-guru)

(defun my-go-mode-hook ()
  (add-hook 'before-save-hook 'gofmt-before-save)
  (setq gofmt-command "goimports")
  (if (not (string-match "go" compile-command))
      (set (make-local-variable 'compile-command)
           "go build -v && go test -v && go vet"))

  (go-guru-hl-identifier-mode)

  (evil-define-key nil evil-normal-state-map
    "gd" 'lsp-find-definition
    "gb" 'pop-tag-mark
    "gc" 'compile
    "gr" 'recompile
    "g[" 'next-error
    "g(" 'previous-error)
                                        ;  (let ((govet (flycheck-checker-get 'go-vet 'command)))
                                        ;  (when (equal (cadr govet) "tool")
                                        ;  (setf (cdr govet) (cddr govet))))
  )

(use-package flycheck-golangci-lint
  :ensure t
  :hook (go-mode . flycheck-golangci-lint-setup))

(add-hook 'go-mode-hook 'my-go-mode-hook)

(add-to-list 'auto-mode-alist '("\\.go'" . go-mode))

(require 'powerline-evil)
(powerline-center-evil-theme)

(global-aggressive-indent-mode 1)

(require 'smartparens-config)
(smartparens-mode t)

